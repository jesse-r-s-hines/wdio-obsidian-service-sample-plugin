# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Check for new Obsidian
# Schedule to trigger test workflow whenever there's a new Obsidian version
# If you set up Obsidian Catalyst secrets, this will test against the Obsidian beta versions
# as well, letting you know if there are any issues early.

# If you have created your repo from the sample repo, GitHub may not enable the schedule by
# default. You'll need to enable it manually on the GitHub Actions page.

# Note that GitHub will disable schedule workflows after 60 days of repository "inactivity"
on:
  schedule: # Run daily
    - cron: '42 13 * * *'

jobs:
  check:
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: "Check if there's a new Obsidian version"
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            // Get timestamp of the latest Obsidian version (wdio-obsidian-service uses this
            // file to get Obsidian versions and their metadata)
            const obsidianVersionsUrl = 'https://raw.githubusercontent.com/jesse-r-s-hines/wdio-obsidian-service/HEAD/obsidian-versions.json';
            const versions = await fetch(obsidianVersionsUrl).then(r => r.json());
            const lastObsidianUpdateTime = new Date(versions.metadata.timestamp);

            // Get timestamp of last run of this workflow
            const workflowId = process.env.GITHUB_WORKFLOW_REF.match(/.*?\/.*?\/(.*)@.*/)[1];
            const response = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner, repo: context.repo.repo,
                workflow_id: workflowId, status: 'success',
                per_page: 1,
            });
            const lastWorkflowRun = response.data.workflow_runs[0];
            const lastWorkflowRunTime = new Date(lastWorkflowRun?.created_at ?? 0);

            if (isNaN(lastObsidianUpdateTime.getTime()) || isNaN(lastWorkflowRunTime.getTime())) {
                throw Error("Failed to parse requests");
            }

            // Check if Obsidian has updated since the last run, with a buffer for any clock drift
            const dateDiff = lastWorkflowRunTime.getTime() - lastObsidianUpdateTime.getTime();
            if (dateDiff < 15 * 60 * 1000) {
                console.log("New Obsidian version found, triggering tests.")
                await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner, repo: context.repo.repo,
                    workflow_id: "test.yaml",
                    ref: "main",
                });
            } else {
                console.log("No new Obsidian version.")
            }

